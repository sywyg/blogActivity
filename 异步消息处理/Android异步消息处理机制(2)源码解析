应该是Handler异步消息机制
上一章讲解了Android异步消息处理机制的基本使用，下面将简单地探寻一下异步机制背后的奥妙，源码版本为：API22。



首先，声明一下本文是在我参考了一下各位的文章之后才慢慢熟悉的， 若有不足之处，还望各位批评指正！。菜鸟上路，，，，

郭霖博客：
鸿洋博客：
任玉刚博客：
还有，，，，
刘超 深入解析android5.0系统
先后顺序按照拼音排序，无关技术本身。

先简单地总结一下Looper，MessageQueue，Message和Handler四者之间的关系：？？？？？？？？？？？？？？
？？？？？？？？？？？？？？？？？
？？？？？？？？？？？？？？？？？？？？？总结部分再改改，不能太像，，，，

- Looper和MessageQueue
	Looper对象是线程的消息循环处理器，每个线程只能有一个Looper。Looper内部有一个消息队列MessageQueue，所有线程的消息都存放在该队列中。android在启动时为主线程（UI线程）自动创建一个Looper对象，而我们自己创建线程时必须要创建Looper对象。
- Handler（非抽象类）
	Handler对象是Message对象的接收者和处理者。用户通过Handler把消息添加到消息队列，同时通过Handler的回调方法hanldeMessage()处理消息。Hanlder在构造时和一个Looper对象关联在一起。Handler和Looper是多对一的关系，多个Handler对象可以和同一个Looper对象建立关系，反之则不行。
- Message
	Message是消息的载体，是Parcelable的派生类。


#四者涉及到的主要成员变量和方法

##Looper类的主要成员变量和方法：

```java

public final class Looper {
	// 成员变量
	static final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();
    private static Looper sMainLooper; 
    final MessageQueue mQueue;
    final Thread mThread;
    // 成员方法
	public static void prepare() {...}
    private static void prepare(boolean quitAllowed) {...}
	public static void prepareMainLooper() {...}
    public static Looper getMainLooper() {...}
    public static void loop() {...}
    public static Looper myLooper() {...}
    public static MessageQueue myQueue() {...}
}

```

##MessageQueue类中的主要成员方法：

```java

public final class MessageQueue {
	Message next() {...}
	boolean enqueueMessage(Message msg, long when){...}
	boolean hasMessages(Handler h, int what, Object object) {...}
	boolean hasMessages(Handler h, Runnable r, Object object) {...}
	void removeMessages(Handler h, int what, Object object) {...}
	void removeMessages(Handler h, Runnable r, Object object) {...}
}

```

##Handler类中的主要成员变量和方法：

```java
public class Handler {
	//内部接口
	public interface Callback {
        public boolean handleMessage(Message msg);
    }
    //处理消息相关方法
    public void handleMessage(Message msg) {}
    public void dispatchMessage(Message msg) {...}
    private static void handleCallback(Message message) {...}
    // 构造器相关方法
    public Handler() {...}
  	public Handler(Callback callback) {...}
    public Handler(Looper looper) {...}
    public Handler(Looper looper, Callback callback) {...}
    public Handler(boolean async) {...}
    public Handler(Callback callback, boolean async) {...}
 	public Handler(Looper looper, Callback callback, boolean async) {...}
 	// 获取Message相关方法
 	public final Message obtainMessage(){...}
   	public final Message obtainMessage(int what){...}
	public final Message obtainMessage(int what, Object obj){...}
    public final Message obtainMessage(int what, int arg1, int arg2){...}
	public final Message obtainMessage(int what, int arg1, int arg2, Object obj){...}
	// post相关方法
	public final boolean post(Runnable r){...}
 	public final boolean postAtTime(Runnable r, long uptimeMillis){...}
 	public final boolean postAtTime(Runnable r, Object token, long uptimeMillis){...}
 	public final boolean postDelayed(Runnable r, long delayMillis){...}
 	public final boolean postAtFrontOfQueue(Runnable r){...}
 	// send相关方法
  	public final boolean sendMessage(Message msg){...}
	public final boolean sendEmptyMessage(int what){...}
    public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {...}
	public final boolean sendEmptyMessageAtTime(int what, long uptimeMillis) {...}
    public final boolean sendMessageDelayed(Message msg, long delayMillis){...}
	public boolean sendMessageAtTime(Message msg, long uptimeMillis) {...}
	public final boolean sendMessageAtFrontOfQueue(Message msg) {...}
	// 进出消息队列
    private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {...}
	public final void removeMessages(int what) {...}
	public final void removeMessages(int what, Object object) {...}
	public final void removeCallbacksAndMessages(Object token) {...}

}

```

##Message类中的主要成员变量和方法：

```java

public final class Message implements Parcelable {
	// 主要成员变量
	public int what;
    public int arg1; 
    public int arg2;
    public Object obj;
    public Messenger replyTo;
   	private static final Object sPoolSync = new Object();
    private static Message sPool;
    private static int sPoolSize = 0;
    private static final int MAX_POOL_SIZE = 50;
    // 主要成员方法
    public Message() {} // 不建议使用
    // 获取Message相关方法
	public static Message obtain() {...}
    public static Message obtain(Message orig) {...}
    public static Message obtain(Handler h) {...}
    public static Message obtain(Handler h, Runnable callback) {...}
    public static Message obtain(Handler h, int what) {...}
    public static Message obtain(Handler h, int what, Object obj) {...}
    public static Message obtain(Handler h, int what, int arg1, int arg2) {...}
    public static Message obtain(Handler h, int what, int arg1, int arg2, Object obj) {...}

	public void setTarget(Handler target) {...}
	public void sendToTarget() {...}
    public Handler getTarget() {...}
    public Runnable getCallback() {...}
    public Bundle getData() {...}
	public Bundle peekData() {...}
    public void setData(Bundle data) {...}
    public boolean isAsynchronous() {...}
    public void setAsynchronous(boolean async) {...}

}

```

下面将以问答的方式解析异步消息处理机制。

#问答解析

##1. ThreadLocal的作用？

解析：ThreadLocal是Thread Local Variable即线程本地变量的意思，通过把数据放在ThreadLocal中就可以让每个线程创建一个该变量的副本，从而避免并发访问的线程安全问题。这里保存Looper类的实例对象。

##2. 为什么在UI线程中实例化Handler并不需要`Looper.prepare()`，而在子线程中则需要`Looper.prepare()`？

解析：这是因为在ActivityThread类中的`main()`方法调用了`Looper.prepareMainLooper()`，简单代码如下：

```java

public static void main(String[] args) {
       ...// 前面的省略了

        Looper.prepareMainLooper();

        ActivityThread thread = new ActivityThread();
        thread.attach(false);
        if (sMainThreadHandler == null) {
            sMainThreadHandler = thread.getHandler();
        }
        if (false) {
            Looper.myLooper().setMessageLogging(new
                    LogPrinter(Log.DEBUG, "ActivityThread"));
        }

        Looper.loop();

        throw new RuntimeException("Main thread loop unexpectedly exited");
    }

```

可以看到`main()`方法中调用了`Looper.prepareMainLooper()`，而`Looper.prepareMainLooper()`源码为：

```java
 
  public static void prepareMainLooper() {
        prepare(false);
        synchronized (Looper.class) {
            if (sMainLooper != null) {
                throw new IllegalStateException("The main Looper has already been prepared.");
            }
            // 若已经存在Looper对象直接从ThreadLocal对象sThreadLocal中获取
            sMainLooper = myLooper();
        }
    }

```

而`prepare(boolean)`代码如下：

```java

 private static void prepare(boolean quitAllowed) {
        if (sThreadLocal.get() != null) {
            throw new RuntimeException("Only one Looper may be created per thread");
        }
        sThreadLocal.set(new Looper(quitAllowed));
    }

```

到这里我们可以看到`main()`方法中调用了`Looper.prepareMainLooper()`，而`Looper.prepareMainLooper()`又调用了`prepare(boolean)`。`prepare(boolean)`方法就会创建一个Looper对象并保存在静态变量sThreadLocal（ThreadLocal类实例）。

同时在`prepare(boolean)`可以看到若sThreadLocal已经有一个Looper对象后再创建就会出现异常。这说明了两点：1. 一个线程中只能有一个Looper对象；2. 一个线程中只能最多调用一次`prepare()`等prepare相关的方法（`prepare()`，`prepare(boolean)`，`prepareMainLooper()`（UI线程中调用））。

而我们在子线程中调用的是`Looper.prepare()`，来看一下这个方法的源码：

```java

public static void prepare() {
        prepare(true);
    }

```

可以看到同样也是调用了`prepare(boolean)`。

##3. 实例化Handler系统为我们做了哪些事情？

解析：该问题主要涉及到Handler中以下几个方法：

```java

public Handler() {this(null, false);}
public Handler(Callback callback) {this(callback, false);}
public Handler(Looper looper) {this(looper, null, false);}
public Handler(Looper looper, Callback callback) {this(looper, callback, false);}
public Handler(boolean async) {this(null, async);}
public Handler(Callback callback, boolean async) {
        if (FIND_POTENTIAL_LEAKS) {
            final Class<? extends Handler> klass = getClass();
            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&
                    (klass.getModifiers() & Modifier.STATIC) == 0) {
                Log.w(TAG, "The following Handler class should be static or leaks might occur: " +
                    klass.getCanonicalName());
            }
        }

        mLooper = Looper.myLooper();
        if (mLooper == null) {
            throw new RuntimeException(
                "Can't create handler inside thread that has not called Looper.prepare()");
        }
        mQueue = mLooper.mQueue;
        mCallback = callback;
        mAsynchronous = async;
    }
public Handler(Looper looper, Callback callback, boolean async) {
        mLooper = looper;
        mQueue = looper.mQueue;
        mCallback = callback;
        mAsynchronous = async;
    }

```

在上述构造器中可能传递的参数为：

- Looper对象，用于指定Handler将消息发送到的Looper对象。
- Callback接口对象，用于处理Handler发送的消息。
- boolean值，是否是异步操作。针对Handler来说这里都是传递的false。

首先，在`Handler(Callback callback, boolean async)`中我们看到调用了`Looper.myLooper()`返回Looper对象，若没有则会抛出异常。

根据以上构造器，我们能够有多种方式实例化一个handler对象，前五个构造器最终都会调用下面两个构造器。对于`Handler(Callback callback, boolean async)`这个构造器没有指定Handler的Looper对象，则使用当前线程的Looper对象。同时我们看到传递了Callback接口对象，将其值赋值给了mCallback，我们来看一下相关的源码：

```java

public interface Callback {public boolean handleMessage(Message msg);}
final Callback mCallback;
public void dispatchMessage(Message msg) {
        if (msg.callback != null) {
            handleCallback(msg);
        } else {
            if (mCallback != null) {
                if (mCallback.handleMessage(msg)) {
                    return;
                }
            }
            handleMessage(msg);
        }
    }

```

通过上述代码我们可以看到，若传递Callback接口对象的话，在`dispatchMessage(Message msg)`中将不会执行`handleMessage(msg)`，而是调用




Looper.loop()，主线程中为啥不阻塞
